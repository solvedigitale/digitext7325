import React, { useState, useEffect } from 'react';
import { RefreshCw, Filter, Download, AlertCircle, CheckCircle, Info } from 'lucide-react';

export function SystemLogs() {
  const [logs, setLogs] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [filter, setFilter] = useState('all');
  
  useEffect(() => {
    fetchLogs();
  }, []);
  
  const fetchLogs = () => {
    setIsLoading(true);
    
    // Simulate API call to fetch logs
    setTimeout(() => {
      const mockLogs = [
        {
          id: 'log-1',
          timestamp: new Date(Date.now() - 1000 * 60 * 5),
          level: 'info',
          message: 'User logged in: admin@example.com',
          source: 'auth',
        },
        {
          id: 'log-2',
          timestamp: new Date(Date.now() - 1000 * 60 * 10),
          level: 'error',
          message: 'Failed to connect to WhatsApp API: Invalid credentials',
          source: 'whatsapp',
        },
        {
          id: 'log-3',
          timestamp: new Date(Date.now() - 1000 * 60 * 15),
          level: 'warning',
          message: 'Rate limit approaching for Instagram API',
          source: 'instagram',
        },
        {
          id: 'log-4',
          timestamp: new Date(Date.now() - 1000 * 60 * 20),
          level: 'info',
          message: 'Message sent to customer via WhatsApp',
          source: 'whatsapp',
        },
        {
          id: 'log-5',
          timestamp: new Date(Date.now() - 1000 * 60 * 25),
          level: 'info',
          message: 'New contact created: John Doe',
          source: 'contacts',
        },
        {
          id: 'log-6',
          timestamp: new Date(Date.now() - 1000 * 60 * 30),
          level: 'error',
          message: 'Database connection error: Connection timeout',
          source: 'database',
        },
        {
          id: 'log-7',
          timestamp: new Date(Date.now() - 1000 * 60 * 35),
          level: 'info',
          message: 'Webhook received from Facebook',
          source: 'messenger',
        },
        {
          id: 'log-8',
          timestamp: new Date(Date.now() - 1000 * 60 * 40),
          level: 'warning',
          message: 'Message delivery delayed to customer',
          source: 'messenger',
        },
        {
          id: 'log-9',
          timestamp: new Date(Date.now() - 1000 * 60 * 45),
          level: 'info',
          message: 'System backup completed successfully',
          source: 'system',
        },
        {
          id: 'log-10',
          timestamp: new Date(Date.now() - 1000 * 60 * 50),
          level: 'info',
          message: 'API key regenerated by admin',
          source: 'security',
        },
      ];
      
      setLogs(mockLogs);
      setIsLoading(false);
    }, 1000);
  };
  
  const filteredLogs = logs.filter(log => {
    if (filter === 'all') return true;
    return log.level === filter;
  });
  
  const getLogIcon = (level: string) => {
    switch (level) {
      case 'error':
        return <AlertCircle className="h-4 w-4 text-red-500" />;
      case 'warning':
        return <AlertCircle className="h-4 w-4 text-yellow-500" />;
      case 'info':
        return <Info className="h-4 w-4 text-blue-500" />;
      case 'success':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      default:
        return <Info className="h-4 w-4 text-gray-500" />;
    }
  };
  
  const formatDate = (date: Date) => {
    return date.toLocaleString();
  };
  
  const downloadLogs = () => {
    const logText = logs.map(log => 
      `[${formatDate(log.timestamp)}] [${log.level.toUpperCase()}] [${log.source}] ${log.message}`
    ).join('\n');
    
    const blob = new Blob([logText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `system-logs-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  
  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h1 className="text-2xl font-bold text-gray-900">System Logs</h1>
        <div className="flex space-x-2">
          <div className="relative">
            <select
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              className="appearance-none block pl-3 pr-10 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
            >
              <option value="all">All Levels</option>
              <option value="info">Info</option>
              <option value="warning">Warning</option>
              <option value="error">Error</option>
              <option value="success">Success</option>
            </select>
            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
              <Filter className="h-4 w-4" />
            </div>
          </div>
          
          <button
            onClick={downloadLogs}
            className="px-3 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 flex items-center"
          >
            <Download className="h-4 w-4 mr-1" />
            Export
          </button>
          
          <button
            onClick={fetchLogs}
            disabled={isLoading}
            className="px-3 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 flex items-center"
          >
            <RefreshCw className={`h-4 w-4 mr-1 ${isLoading ? 'animate-spin' : ''}`} />
            Refresh
          </button>
        </div>
      </div>
      
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Time
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Level
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Source
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Message
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {isLoading ? (
                <tr>
                  <td colSpan={4} className="px-6 py-4 text-center text-sm text-gray-500">
                    <RefreshCw className="h-5 w-5 animate-spin mx-auto" />
                    <span className="mt-2 block">Loading logs...</span>
                  </td>
                </tr>
              ) : filteredLogs.length > 0 ? (
                filteredLogs.map((log) => (
                  <tr key={log.id}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(log.timestamp)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        {getLogIcon(log.level)}
                        <span className={`ml-1 text-xs font-medium ${
                          log.level === 'error' ? 'text-red-800' :
                          log.level === 'warning' ? 'text-yellow-800' :
                          log.level === 'info' ? 'text-blue-800' :
                          'text-green-800'
                        }`}>
                          {log.level.toUpperCase()}
                        </span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {log.source}
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-500">
                      {log.message}
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan={4} className="px-6 py-4 text-center text-sm text-gray-500">
                    No logs found matching the current filter.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}